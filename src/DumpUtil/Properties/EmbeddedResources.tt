<#@ template debug="false" hostspecific="true" language="C#" visibility="internal" 
#><#@ assembly name="System.Core" 
#><#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" completion="C:\Windows\assembly\GAC\Microsoft.VisualStudio.Shell.Interop.8.0\8.0.0.0__b03f5f7f11d50a3a\microsoft.visualstudio.shell.interop.8.0.dll" 
#><#@ assembly name="EnvDTE" completion="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\PublicAssemblies\EnvDTE.dll" 
#><#@ assembly name="EnvDTE80" completion="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\PublicAssemblies\EnvDTE80.dll" 
#><#@ assembly name="VSLangProj" completion="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\PublicAssemblies\VSLangProj.dll" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Text" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ import namespace="Microsoft.VisualStudio.Shell.Interop" 
#><#@ import namespace="EnvDTE" 
#><#@ import namespace="EnvDTE80" 
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating" 
#><#@ output extension=".cs" 
#>using System.IO;
using System.Reflection;
using System.Collections.Generic;

static class Res 
{
    #region Private Static Methods
    static object _lock = new object();
    static Dictionary<string,string> _dict = new Dictionary<string,string>();
    private static string GetResource(string name)
    {
        lock(_lock)
        {
            if(!_dict.ContainsKey(name))
            {            
                var assembly = Assembly.GetExecutingAssembly();

                using (Stream stream = assembly.GetManifestResourceStream(name))
                {
                    if(stream == null) throw new FileNotFoundException("Resource not found");
                    using (StreamReader reader = new StreamReader(stream))
                    {
                        _dict[name] = reader.ReadToEnd();
                    }		
                }
            
            }

            return _dict[name];
        }
    }
    #endregion

<#
var hostServiceProvider = (IServiceProvider)this.Host;
var dte = hostServiceProvider.GetService(typeof (DTE)) as DTE;
PushIndent("    ");
Project project = dte.Solution.Projects.Cast<Project>().Single(x => x.Name == "DumpUtil");

Util.DumpProjectItems(this, project.ProjectItems.Cast<ProjectItem>().ToList(), "DumpUtil" );
    PopIndent();
#>}<#+

    static class Util
    {



        public static void DumpProjectItems(TextTransformation host ,List<ProjectItem> projectItems, string ns)
        {
            foreach (ProjectItem projectItem in projectItems)
            {
            
                //host.WriteLine("//" + projectItem.Name);
                //foreach (Property property in projectItem.Properties)
                //{
                //	host.WriteLine("      //" + property.Name + " = " + property.Value);
                //}
                if (projectItem.Properties.Cast<Property>().Where(x => x.Name == "ItemType").Where(x => x.Value.ToString() == "EmbeddedResource").Any() )
                {
                    var n = projectItem.Name.Substring(0, projectItem.Name.IndexOf("."));
                    var rn = ns + "." + projectItem.Name;
                    host.WriteLine("// " + rn);
                    host.WriteLine("public static string " + n );
                    host.WriteLine("{");
                    host.PushIndent("    ");
                    host.WriteLine("get");
                    host.WriteLine("{");
                    host.PushIndent("    ");
                    host.WriteLine(string.Format("return GetResource(\"{0}\");", rn));
                    host.PopIndent();

                    host.WriteLine("}");
                    host.PopIndent();
                    host.WriteLine("}");

                    host.WriteLine("");
                    //foreach (Property p1 in projectItem.Properties)
                    //{
                    //	host.WriteLine("      //" + p1.Name + " = " + p1.Value);
                    //}
                }

                
                if (projectItem.ProjectItems != null)
                {
                    DumpProjectItems(host, projectItem.ProjectItems.Cast<ProjectItem>().ToList(), ns + "." + projectItem.Name);
                }
            }
        }
    }

 #>